package com.funo.livelihood.util;

import android.content.Context;
import android.text.Html;
import android.text.Spannable;
import android.text.SpannableString;
import android.text.Spanned;
import android.text.TextUtils;
import android.text.style.CharacterStyle;
import android.text.style.ForegroundColorSpan;
import android.util.TypedValue;
import android.view.ViewTreeObserver;
import android.widget.TextView;

import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 * 一些常用的字符串类型判断，正则表达式
 * Created by lw
 */
public class StringUtils {

    /**
     * 判断是否为邮箱
     *
     * @param string
     * @return
     */
    public static boolean isEmail(String string) {
        if (TextUtils.isEmpty(string))
            return false;
        Pattern p = Pattern.compile("^([a-zA-Z0-9_-])+@([a-zA-Z0-9_-])+(\\.([a-zA-Z0-9_-])+)+$");
        Matcher m = p.matcher(string);
        return m.matches();
    }

    /**
     * 判断是否是纯数字型字符串
     *
     * @param string
     * @return
     */
    public static boolean isNumber(String string) {
        if (TextUtils.isEmpty(string))
            return false;
        Pattern p = Pattern.compile("^(\\d+)$");
        Matcher m = p.matcher(string);
        return m.matches();
    }

    /**
     * 判断该字符串是否为中文
     *
     * @param string
     * @return
     */
    public static boolean isChinese(String string) {
        int n = 0;
        for (int i = 0; i < string.length(); i++) {
            n = (int) string.charAt(i);
            if (!(19968 <= n && n < 40869)) {
                return false;
            }
        }
        return true;
    }

    //验证邮政编码
    public static boolean checkPost(String post) {
        if (post.matches("[1-9]\\d{5}(?!\\d)")) {
            return true;
        } else {
            return false;
        }
    }

    /**
     * 判断字符串是否为手机号码
     *
     * @param num
     * @return
     */
    public static boolean isMobile(String num) {
        if (isEmpty(num) || !isNumber(num)) {
            return false;
        }
        // 非1开头，长度不等于11位，均为非手机号码<其中以“11”或“12”开头用作国家特殊电话号码段，不能作为手机号码段>
        if (!num.startsWith("1") || num.length() != 11 || num.startsWith("11") || num.startsWith("12")) {
            return false;
        }
        return true;
    }

    /**
     * 判断字符串是否有值，如果为null或者是空字符串或者只有空格或者为"null"字符串，则返回true，否则则返回false
     */
    public static boolean isEmpty(String value) {
        if (value != null && !"".equalsIgnoreCase(value.trim()) && !"null".equalsIgnoreCase(value.trim())) {
            return false;
        } else {
            return true;
        }
    }

    /**
     * 判断多个字符串是否相等，如果其中有一个为空字符串或者null，则返回false，只有全相等才返回true
     */
    public static boolean isEquals(String... agrs) {
        String last = null;
        for (int i = 0; i < agrs.length; i++) {
            String str = agrs[i];
            if (isEmpty(str)) {
                return false;
            }
            if (last != null && !str.equalsIgnoreCase(last)) {
                return false;
            }
            last = str;
        }
        return true;
    }

    /**
     * 返回一个高亮spannable
     *
     * @param content 文本内容
     * @param color   高亮颜色
     * @param start   起始位置
     * @param end     结束位置
     * @return 高亮spannable
     */
    public static CharSequence getHighLightText(String content, int color, int start, int end) {
        if (TextUtils.isEmpty(content)) {
            return "";
        }
        start = start >= 0 ? start : 0;
        end = end <= content.length() ? end : content.length();
        SpannableString spannable = new SpannableString(content);
        CharacterStyle span = new ForegroundColorSpan(color);
        spannable.setSpan(span, start, end, Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
        return spannable;
    }

    /**
     * 获取链接样式的字符串，即字符串下面有下划线
     *
     * @param resId 文字资源
     * @return 返回链接样式的字符串
     */
    public static Spanned getHtmlStyleString(Context context, int resId) {
        StringBuilder sb = new StringBuilder();
        sb.append("<a href=\"\"><u><b>").append(context.getResources().getString(resId)).append(" </b></u></a>");
        return Html.fromHtml(sb.toString());
    }

    /**
     * 格式化文件大小，不保留末尾的0
     */
    public static String formatFileSize(long len) {
        return formatFileSize(len, false);
    }

    /**
     * 格式化文件大小，保留末尾的0，达到长度一致
     */
    public static String formatFileSize(long len, boolean keepZero) {
        String size;
        DecimalFormat formatKeepTwoZero = new DecimalFormat("#.00");
        DecimalFormat formatKeepOneZero = new DecimalFormat("#.0");
        if (len < 1024) {
            size = String.valueOf(len + "B");
        } else if (len < 10 * 1024) {
            // [0, 10KB)，保留两位小数
            size = String.valueOf(len * 100 / 1024 / (float) 100) + "KB";
        } else if (len < 100 * 1024) {
            // [10KB, 100KB)，保留一位小数
            size = String.valueOf(len * 10 / 1024 / (float) 10) + "KB";
        } else if (len < 1024 * 1024) {
            // [100KB, 1MB)，个位四舍五入
            size = String.valueOf(len / 1024) + "KB";
        } else if (len < 10 * 1024 * 1024) {
            // [1MB, 10MB)，保留两位小数
            if (keepZero) {
                size = String.valueOf(formatKeepTwoZero.format(len * 100 / 1024 / 1024 / (float) 100)) + "MB";
            } else {
                size = String.valueOf(len * 100 / 1024 / 1024 / (float) 100) + "MB";
            }
        } else if (len < 100 * 1024 * 1024) {
            // [10MB, 100MB)，保留一位小数
            if (keepZero) {
                size = String.valueOf(formatKeepOneZero.format(len * 10 / 1024 / 1024 / (float) 10)) + "MB";
            } else {
                size = String.valueOf(len * 10 / 1024 / 1024 / (float) 10) + "MB";
            }
        } else if (len < 1024 * 1024 * 1024) {
            // [100MB, 1GB)，个位四舍五入
            size = String.valueOf(len / 1024 / 1024) + "MB";
        } else {
            // [1GB, ...)，保留两位小数
            size = String.valueOf(len * 100 / 1024 / 1024 / 1024 / (float) 100) + "GB";
        }
        return size;
    }

    /**
     * textview自适应
     *
     * @param tv
     * @param text
     */
    public static void adjustTvTextSize(final TextView tv, final String text) {

        tv.getViewTreeObserver().addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener() {
            @Override
            public void onGlobalLayout() {
                tv.setText(text);
                //测量字符串的长度
                float measureWidth = tv.getPaint().measureText(String.valueOf(tv.getText()));
                //得到TextView 的宽度
                int width = tv.getWidth() - tv.getPaddingLeft() - tv.getPaddingRight() - 10;// 此处减10补偿差额进行校正
                //当前size大小
                float textSize = tv.getTextSize();
                if (width < measureWidth) {
                    textSize = (width / measureWidth) * textSize;
                }
                //注意，使用像素大小设置
                tv.setTextSize(TypedValue.COMPLEX_UNIT_PX, textSize);
                tv.getViewTreeObserver().removeGlobalOnLayoutListener(this);
            }
        });
    }

    /**
     * 将字符串转位日期类型
     *
     * @param sdate
     * @return
     */
    public static Date toDate(String sdate) {
        try {
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
            return sdf.parse(sdate);
        } catch (ParseException e) {
            return null;
        }
    }

    /**
     * 将字符串日期格式化
     *
     * @param dateStr
     * @param formatStr
     * @return
     */
    public static String formatStr(String dateStr, String formatStr) {
        SimpleDateFormat sdf = new SimpleDateFormat(formatStr);
        String date = sdf.format(toDate(dateStr));

        return date;

    }

    /**
     * 将long型字符串转换成时间格式
     *
     * @param strTime
     * @param formatStr
     * @return
     */
    public static String formatStringTime(String strTime, String formatStr) {
        SimpleDateFormat sdf = new SimpleDateFormat(formatStr);
        long time = Long.valueOf(strTime);
        return sdf.format(time);
    }

    /**
     * 将时间戳字符串格式化
     *
     * @param strTime
     * @param formatStr
     * @return
     */
    public static String formatStrTime(String strTime, String formatStr) {
        if (isLongString(strTime)) {
            return formatStringTime(strTime, formatStr);
        }
        return formatStr(strTime, formatStr);
    }

    /**
     * 判断字符串是否为纯数字型
     *
     * @param str
     * @return
     */
    public static boolean isLongString(String str) {
        return str.matches("[0-9]+");
    }
}
